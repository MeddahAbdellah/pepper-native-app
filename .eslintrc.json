{
  "env": {
    "browser": true
  },
  "extends": [
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
        "jsx": true
    },
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": [
    "react",
    "@typescript-eslint"
  ],
  "rules": {
    // (Some of the) Rules to remove when switching to Prettier
    "camelcase": "off",
    "object-curly-spacing": "off",
    "space-before-function-paren": "off",
    "arrow-body-style": "error",
    "arrow-parens": ["off", "as-needed"],
    "@typescript-eslint/space-before-function-paren": ["error", "never"],
    "brace-style": "off",
    "curly": ["error", "multi-line"],
    "quotes": "off", // Overridden by @typescript-eslint/quotes
    "semi": "off", // Overridden by @typescript-eslint/semi
    "@typescript-eslint/semi": "error",
    "@typescript-eslint/indent": ["error", 2, {
      "FunctionDeclaration": { "parameters": "first" },
      "FunctionExpression": { "parameters": "first" },
      "SwitchCase": 1,
      "ArrayExpression": 1
    }],
    "indent": "off", // Overridden by @typescript-eslint/indent

    // "import/no-deprecated": "off",
    "import/order": "off",
    "no-sync": "off",
    "@typescript-eslint/explicit-module-boundary-types": "warn",

    // TS rules
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "variable",
        "filter": {
          "regex": "^([Pp]epper)",
          "match": true
        },
        "format": ["PascalCase"]
      },
      {
        "selector": "variable",
        "filter": {
          "regex": "^([Ss]tatic)",
          "match": true
        },
        "format": ["PascalCase"]
      },
      {
        "selector": "variable",
        "filter": {
          "regex": "^([Rr]eact)",
          "match": true
        },
        "format": ["PascalCase"]
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      {
        "selector": ["enum", "typeAlias"],
        "format": ["PascalCase", "UPPER_CASE"]
      },
      {
        "selector": ["enumMember"],
        "format": ["PascalCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": ["objectLiteralProperty", "enumMember"],
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "classProperty",
        "format": ["camelCase", "UPPER_CASE", "PascalCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": ["typeProperty"],
        "format": null,
        "filter": {
          "regex": "^(created_at|updated_at|deleted_at)$",
          "match": true
        }
      }
    ],
    "@typescript-eslint/adjacent-overload-signatures": "error",
    "@typescript-eslint/array-type": ["error", { "default": "array-simple" }],
    "@typescript-eslint/brace-style": ["error", "1tbs", { "allowSingleLine": true }],
    "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
    "@typescript-eslint/explicit-function-return-type": ["error", { "allowExpressions": true }],
    "@typescript-eslint/no-empty-function": "error",
    "@typescript-eslint/no-empty-interface": "error",
    "@typescript-eslint/no-explicit-any": "off", // TODO put error but too many work to do.......
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/prefer-regexp-exec": "off", // because we usually don"t care
    "@typescript-eslint/unified-signatures": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/typedef": ["error", {
      "arrayDestructuring": false,
      "arrowParameter": false,
      "memberVariableDeclaration": true,
      "objectDestructuring": false,
      "parameter": true,
      "propertyDeclaration": true,
      "variableDeclaration": false
    }],
    "@typescript-eslint/restrict-plus-operands": "off",
    "@typescript-eslint/no-floating-promises": "off",
    // Other rules
    "import/no-restricted-paths": "off",
    "import/no-unresolved": "off",

    "id-blacklist": ["error"], // TODO add more "data", "err", "e", "cb", "callback", "delete"
    "max-classes-per-file": "off", // can be changed
    "no-console": ["error", { "allow": ["warn", "error", "table"] }],
    "no-confusing-arrow": ["error", {"allowParens": true}],
    "no-plusplus": ["error", { "allowForLoopAfterthoughts": true }],
    "multiline-ternary": ["error", "always-multiline"],
    "operator-linebreak": ["error", "after"],
    "no-empty-function": "off",
    "nonblock-statement-body-position": ["error", "any"], // beside, below, we don"t usually care
    "object-curly-newline": ["error", {
      "ObjectExpression": { "multiline": true, "minProperties": 4, "consistent": true },
      "ImportDeclaration": { "multiline": true, "minProperties": 4, "consistent": true }
    }],
    "no-restricted-syntax": [
      "error",
      "ForInStatement",
      "LabeledStatement",
      "WithStatement"
    ],
    "spaced-comment": ["error", "always", {
      "line": {
        "exceptions": ["-", "+"],
        "markers": ["=", "!", "/"] // space here to support sprockets directives, slash for TS /// comments
      },
      "block": {
        "exceptions": ["-", "+"],
        "markers": ["=", "!", ":", "::"], // space here to support sprockets directives and flow comment types
        "balanced": true
      }
    }]
  }
}
