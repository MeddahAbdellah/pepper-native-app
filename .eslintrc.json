{
  "env": {
    "browser": true
  },
  "extends": [],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
        "jsx": true
    },
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "plugins": [
    "react",
    "@typescript-eslint"
  ],
  "rules": {
    // (Some of the) Rules to remove when switching to Prettier
    "camelcase": "off",
    "arrow-body-style": "error",
    "arrow-parens": ["off", "as-needed"],
    "@typescript-eslint/space-before-function-paren": ["error", "never"],
    "curly": ["error", "multi-line"],
    "semi": "off", // Overridden by @typescript-eslint/semi
    "@typescript-eslint/semi": "error",

    // "import/no-deprecated": "off",
    "import/order": "off",

    // TS rules
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "variable",
        "filter": {
          "regex": "^([Pp]epper)",
          "match": true
        },
        "format": ["PascalCase"]
      },
      {
        "selector": "variable",
        "filter": {
          "regex": "^([Ss]tatic)",
          "match": true
        },
        "format": ["PascalCase"]
      },
      {
        "selector": "variable",
        "filter": {
          "regex": "^([Rr]eact)",
          "match": true
        },
        "format": ["PascalCase"]
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      {
        "selector": ["enum", "typeAlias"],
        "format": ["PascalCase", "UPPER_CASE"]
      },
      {
        "selector": ["enumMember"],
        "format": ["PascalCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": ["objectLiteralProperty", "enumMember"],
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "classProperty",
        "format": ["camelCase", "UPPER_CASE", "PascalCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": ["typeProperty"],
        "format": null,
        "filter": {
          "regex": "^(created_at|updated_at|deleted_at)$",
          "match": true
        }
      }
    ],
    "no-multi-spaces": "error",
    "array-bracket-spacing": ["error", "never", { "arraysInArrays": false }],
    "no-trailing-spaces": "error",
    "no-spaced-func": "error",
    "keyword-spacing": ["error", { "before": true }],
    "semi-spacing": ["error", { "before": false, "after": false }],
    "space-before-blocks": ["error", { "functions": "always", "keywords": "always" }],
    "arrow-spacing": ["error", { "before": true, "after": true }],
    "eol-last": "error",
    "@typescript-eslint/type-annotation-spacing": ["error", { "before": false, "after": true, "overrides": { "arrow": { "before": true, "after": true }}}],
    "@typescript-eslint/adjacent-overload-signatures": "error",
    "@typescript-eslint/array-type": ["error", { "default": "array-simple" }],
    "@typescript-eslint/brace-style": ["error", "1tbs", { "allowSingleLine": true }],
    "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
    "@typescript-eslint/explicit-function-return-type": ["error", { "allowExpressions": true }],
    "@typescript-eslint/no-empty-function": "error",
    "@typescript-eslint/no-empty-interface": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/prefer-regexp-exec": "off", // because we usually don"t care
    "@typescript-eslint/unified-signatures": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/typedef": ["error", {
      "arrayDestructuring": false,
      "arrowParameter": false,
      "memberVariableDeclaration": true,
      "objectDestructuring": false,
      "parameter": true,
      "propertyDeclaration": true,
      "variableDeclaration": false
    }],
    // Other rules
    "import/no-restricted-paths": "off",
    "import/no-unresolved": "off",

    "id-blacklist": ["error", "data"], // TODO add more "data", "err", "e", "cb", "callback", "delete"
    "no-console": ["error", { "allow": ["warn", "error", "table"] }],
    "no-confusing-arrow": ["error", {"allowParens": true}],
    "no-plusplus": ["error", { "allowForLoopAfterthoughts": true }],
    "multiline-ternary": ["error", "always-multiline"],
    "operator-linebreak": ["error", "after"],
    "no-empty-function": "off",
    "nonblock-statement-body-position": ["error", "any"], // beside, below, we don"t usually care
    "object-curly-newline": ["error", {
      "ObjectExpression": { "multiline": true, "minProperties": 4, "consistent": true },
      "ImportDeclaration": { "multiline": true, "minProperties": 4, "consistent": true }
    }],
    "no-restricted-syntax": [
      "error",
      "ForInStatement",
      "LabeledStatement",
      "WithStatement"
    ],
    "spaced-comment": ["error", "always", {
      "line": {
        "exceptions": ["-", "+"],
        "markers": ["=", "!", "/"] // space here to support sprockets directives, slash for TS /// comments
      },
      "block": {
        "exceptions": ["-", "+"],
        "markers": ["=", "!", ":", "::"], // space here to support sprockets directives and flow comment types
        "balanced": true
      }
    }],
    "indent": [
        "error",
        2,
        {
            "SwitchCase": 1,
            "FunctionDeclaration": {
                "parameters": "first"
            },
            "flatTernaryExpressions": false,
            "ignoreComments": false
        }
    ],
    "implicit-arrow-linebreak": 0,
    "prefer-destructuring": "warn",
    "no-await-in-loop": "warn",
    "no-multi-assign": "error",
    "no-return-await": "error",
    "no-loop-func": "off",
    "no-buffer-constructor": "off",
    "function-paren-newline": "off",
    "object-shorthand": "error",
    "no-restricted-globals": "error",
    "no-case-declarations": "off",
    "no-sync": "error",
    "space-before-function-paren": [
        "error",
        {
            "anonymous": "always",
            "named": "never",
            "asyncArrow": "never"
        }
    ],
    "object-curly-spacing": [2, "always"],
    "comma-dangle": "off",
    "class-methods-use-this": ["off"],
    "no-bitwise": ["off"],
    "lines-between-class-members": [
        "error",
        "always",
        {
            "exceptAfterSingleLine": true
        }
    ],
    "key-spacing": ["error", {
      "beforeColon": false,
      "afterColon": true,
      "mode": "strict"
    }],
    "space-infix-ops": ["error"],
    "max-classes-per-file": "error",
    "no-underscore-dangle": ["off"],
    "no-use-before-define": ["off"],
    "max-len": ["error", { "code": 150 }],
    "no-continue": ["off"],
    "no-process-exit": ["error"],
    "comma-spacing": [2, {"before": false, "after": true}],
    "max-depth": ["error", 2],
    "max-lines-per-function": ["error", 200],
    "quotes": [
        "error",
        "single",
        {
            "avoidEscape": true,
            "allowTemplateLiterals": true
        }
    ],
    // Typescript rules
    "@typescript-eslint/interface-name-prefix": "off",
    "@typescript-eslint/no-inferrable-types": "off",
    "@typescript-eslint/require-await": "off",
    "@typescript-eslint/no-misused-promises": "off",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/ban-ts-comment": "error",
    "@typescript-eslint/no-useless-constructor": "off",
    "@typescript-eslint/camelcase": "off",
    "@typescript-eslint/no-unused-expressions": "off",
    "@typescript-eslint/indent": "off",
    "@typescript-eslint/quotes": "off",
    "@typescript-eslint/explicit-module-boundary-types": "error",
    "@typescript-eslint/comma-dangle": [
        "error",
        {
            "arrays": "only-multiline",
            "objects": "only-multiline",
            "enums": "only-multiline",
            "imports": "always-multiline",
            "exports": "always-multiline",
            "functions": "ignore"
        }
    ],
    "@typescript-eslint/no-use-before-define": ["off"],
    "@typescript-eslint/no-loop-func": "warn",
    "@typescript-eslint/no-unsafe-return": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unsafe-assignment": "off",
    "@typescript-eslint/no-unsafe-call": "off",
    "@typescript-eslint/lines-between-class-members": "off"
  }
}
